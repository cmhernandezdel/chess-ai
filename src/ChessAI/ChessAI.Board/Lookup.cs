namespace ChessAI.Board;

internal class Lookup
{
    // first index is the position of the piece with 0 being a1 and 63 being h8
    // second index is the occupancy of the rank, with the outer squares not mattering
    // occupancy index = (occupancy >> ((square & ~7) + 1)) & 63
    public readonly byte[][] FirstRankAttacks = new byte[8][]
    {
        new byte[] { 
            0xf7, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x1e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x3e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x1e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x7e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x1e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x3e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02,
            0x1e, 0x02, 0x06, 0x02, 0x0e, 0x02, 0x06, 0x02
        },
        new byte[] {
            0xfb, 0xfb, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x1d, 0x1d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x3d, 0x3d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x1d, 0x1d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x7d, 0x7d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x1d, 0x1d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x3d, 0x3d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05,
            0x1d, 0x1d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05
        },
        new byte[] {},
        new byte[] {},
        new byte[] {},
        new byte[] {},
        new byte[] {},
        new byte[] {},
    };
}
